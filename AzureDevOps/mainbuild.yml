# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Module 4 Exercise 1 CI Pipeline

trigger: none

pool:
  vmImage: windows-latest

jobs:
- job: buildAndTest
  displayName: Build & Test

  steps:
  - task: PowerShell@2
    name: CreateVars
    displayName: Load namespace variables into ENV
    inputs:
      targetType: 'inline'
      script: |
        $sqlcmdPath = (Get-Command sqlcmd).Path.TrimEnd("\\SQLCMD.EXE");
        $databaseName = "sqlitydemodb";
        
        Write-Host "##vso[task.setvariable variable=sqlcmdPath;]$sqlcmdPath"
        Write-Host "##vso[task.setvariable variable=databaseName;]$databaseName"


  - task: PowerShell@2
    name: InstallSpawnctl
    displayName: Install spawnctl
    inputs:
      targetType: 'inline'
      script: |
        echo "Downloading and installing spawnctl..."
        New-Item -Path "$(Pipeline.Workspace)/spawnExeTmp" -ItemType directory -Force;    
        Invoke-WebRequest -Uri "https://run.spawn.cc/spawnctl.exe" -UseBasicParsing -OutFile "$(Pipeline.Workspace)/spawnExeTmp/spawnctl.exe"
        & "$(Pipeline.Workspace)/spawnExeTmp/spawnctl.exe" version


  - task: PowerShell@2
    name: createContainer
    displayName: Create SQL Server Instance on Spawn Data-Container
    inputs:
      targetType: 'inline'
      script: |
        $dataImageName = 'mssql-empty:v2019';
        
        $containerName= & "$(Pipeline.Workspace)/spawnExeTmp/spawnctl.exe" create data-container --image $dataImageName --lifetime 30m -q
        $containerJSON= & "$(Pipeline.Workspace)/spawnExeTmp/spawnctl.exe" get data-container $containerName -o json
        $containerInfo = ConvertFrom-JSON -inputObject $containerJSON;
        $containerFQDN=$containerInfo.host+", "+$containerInfo.port;
        $containerUser=$containerInfo.user;
        $containerPassword=$containerInfo.password;
        
        echo "Successfully created Spawn data container '$containerName'"
        
        Write-Host "##vso[task.setvariable variable=containerFQDN;]$containerFQDN"
        Write-Host "##vso[task.setvariable variable=containerUser;]$containerUser"
        Write-Host "##vso[task.setvariable variable=containerPassword;;issecret=true]$containerPassword"
        Write-Host "##vso[task.setvariable variable=containerName;;issecret=true]$containerName"
    env:
      SPAWNCTL_ACCESS_TOKEN: $(SpawnctlAccessToken)


  - task: PowerShell@2
    name: printSQLVersionInfo
    displayName: Print SQL Version Info
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
        Write-Host "";
        Write-Host "$env:CONTAINER_FQDN";
        Write-Host "$env:DATABASE_USERNAME";
        Write-Host "$env:DATABASE_PASSWORD";
        Write-Host "";
        $DS = Invoke-Sqlcmd -ConnectionTimeout 600 -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "$env:CONTAINER_FQDN" -Username "$env:DATABASE_USERNAME" -Password "$env:DATABASE_PASSWORD" -As DataSet
        $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" }    
        Write-Host "";
        Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
    env:
      CONTAINER_FQDN: $(containerFQDN)
      SQLCMD_HOME: $(sqlcmdPath)
      DATABASE_NAME: $(databaseName)
      DATABASE_PASSWORD: $(containerPassword)
      DATABASE_USERNAME: $(containerUser)


  - task: PowerShell@2
    name: deploy
    displayName: Deploy Code to SQL Server Instance on Spawn and Run Tests
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
        Write-Host "";
        
        & $(Pipeline.Workspace)\s\Module4-Exercise1\M4-Exercise1-Tests\build.bat "$env:CONTAINER_FQDN" "-U $env:DATABASE_USERNAME -P $env:DATABASE_PASSWORD" "$env:DATABASE_NAME"
        
        Write-Host "";
        Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
    env:
      CONTAINER_FQDN: $(containerFQDN)
      SQLCMD_HOME: $(sqlcmdPath)
      DATABASE_NAME: $(databaseName)
      DATABASE_PASSWORD: $(containerPassword)
      DATABASE_USERNAME: $(containerUser)






  - script: echo Hello, world!
    displayName: 'Run a one-line script'
